# Importing necessary libraries
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Step 1: Load the dataset

df = pd.read_csv('netflix_titles.csv')  # Should contain columns like 'title' and 'description'

# Step 2: Fill any missing values in the description column
df['description'] = df['description'].fillna('')  # Empty string for missing descriptions

# Step 3: Convert descriptions into TF-IDF vectors
# This helps us represent the text in numerical format
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['description'])  # Each row is a show/movie

# Step 4: Calculate similarity between all pairs of shows
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Step 5: Create a mapping from movie title to DataFrame index
indices = pd.Series(df.index, index=df['title']).drop_duplicates()

# Step 6: Define a function to get recommendations
def recommend(title, cosine_sim=cosine_sim):
    idx = indices.get(title)
    if idx is None:
        return "Title not found in dataset. Please try another one."
    
    # Get similarity scores for this title with all others
    sim_scores = list(enumerate(cosine_sim[idx]))
    
    # Sort the shows based on similarity score in descending order
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    
    # Skip the first one (it's the same show), and pick next 5
    sim_scores = sim_scores[1:6]
    
    # Get the indices of these recommended shows
    movie_indices = [i[0] for i in sim_scores]
    
    # Return the top 5 recommended titles
    return df['title'].iloc[movie_indices].tolist()

#Try getting recommendations for a specific title
print("Top 5 recommendations for 'Narcos':")
print(recommend("Narcos"))
